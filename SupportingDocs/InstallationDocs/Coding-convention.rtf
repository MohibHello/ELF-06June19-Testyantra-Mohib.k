{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Arial;}{\f1\fnil Arial;}{\f2\fswiss\fcharset0 Arial;}{\f3\fmodern\fcharset0 Courier;}{\f4\froman\fcharset0 Times New Roman;}}
{\*\generator Riched20 10.0.17763}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\ul\b\fs36\lang9 Java Code Convention\par

\pard\sa200\sl276\slmult1\qj\ulnone\fs24 Usage :\fs22\par
\b0 1. Improves Readablity.\par
2. Easy to maintain.\par
\b\fs24 File Names :\b0\fs22\par
Java source  must have .java file extension.\par
Java bytecode will be having .class file extension.\ul\b\par
\ulnone\fs24 Common File Names :\fs22\par
\b0 Java file name should be same as that of class name.\par
\b\fs24  File Organization :\fs22\par

\pard\qj\b0 A file consists of sections that should be separated by blank lines and an optional comment identifying each section.\par
\ul\b\par
\ulnone\fs24 Java Source Files :\fs22\par
\b0 Each Java source file contains a single public class or interface. When private classes and interfaces are associated with a public class, you can put them in the same source file as the public class. \par
The public class should be the first class or interface in the file.\par
\par
Java source files have the following ordering:\par
\f1\bullet\f0  Beginning comments (//-single line commet or /* */ multi line comment).\par
\f1\bullet\f0  Package and Import statements; for example:\par
import java.applet.Applet;\par
import java.awt.*;\par
import java.net.*;\par

\pard\sa200\sl276\slmult1\qj\f1\bullet\f0  Class and interface declarations (public class Classname).\b\par

\pard\qj Indentation :\par
\b0 Four spaces should be used as the unit of indentation.\par
Tabs must be set exactly every 8 spaces.\par
\par
\b Line Length :\par
\b0 Avoid lines longer than 80 characters.\par
\par
\b Wrapping Lines :\par
\b0 When an expression will not fit on a single line, break it according to these general principles:\par
\f1\bullet\f0  Break after a comma.\par
\f1\bullet\f0  Break before an operator.\par
\f1\bullet\f0  Prefer higher-level breaks to lower-level breaks.\par
\f1\bullet\f0  Align the new line with the beginning of the expression at the same level on the previous\par
line.\par
\f1\bullet\f0  If the above rules lead to confusing code or to code that\rquote s squished up against the right\par
margin, just indent 8 spaces instead.\par
Here are some examples of breaking method calls:\par
function(longExpression1, longExpression2, longExpression3,\par
longExpression4, longExpression5);\par
\par
var = function1(longExpression1,\par
\tab\tab function2(longExpression2,\par
\tab\tab\tab\tab longExpression3));\par
\par
\b\f2\fs28 Implementation Comment Formats :\fs24\par
\par
\fs22 Block Comments :\f0\par
                                  \b0 /*\par
\tab\tab\tab * Here is a block comment.\par
\tab\tab\tab */\b\par
\b0 Block comments are used to provide descriptions of files, methods, data structures and algorithms.\par
\par
\b\f2 Single-Line Comments :\fs20\par
\f0\fs18\tab\tab\fs22\tab\b0 if (condition) \{\par
\tab\tab\tab /* Handle the condition. */\par
\tab\tab\tab ...\par
\tab\tab\tab\}\par
Short comments can appear on a single line indented to the level of the code that follows.\par
\par
\b\f2 End-Of-Line Comments :\fs20\par
\par
\tab\tab\fs22\tab\b0\f0 if (foo > 1) \{\par
\tab\tab\tab // Do a double-flip.\par

\pard\li2160\qj ...\par
\}\par
else\par

\pard\qj\tab\tab\tab return false; // Explain why here.\ul\b\par
\ulnone\b0 The // comment delimiter begins a comment that continues to the newline. It can comment out a complete line or only a partial line.\par
\par
\b\f2\fs28 Declarations :\par
\par
\fs22 Number Per Line :-\fs24\par
\b0\f0\fs22 One declaration per line is recommended since it encourages commenting. In other words,\par
\tab\tab\tab int level; // indentation level\par
\tab\tab\tab int size; // size of table\par
is preferred over\par
\tab\tab\tab int level, size; //avoid\b\par
\ul\par
\ulnone\f2\fs24 Placement :-\par
\b0\f0\fs22 Put declarations only at the beginning of blocks. (A block is any code surrounded by curly braces \ldblquote\{\rdblquote  and \ldblquote\}\rdblquote .)\par
\fs18\tab\tab\tab void MyMethod() \{\par
\tab\tab\tab int int1; \tab\tab // beginning of method block\par
\tab\tab\tab if (condition) \{\par

\pard\li2160\qj int int2;\tab\tab // beginning of "if" block\par
...\par
\}\par
\}\par
\par
\par

\pard\qj\b\f2\fs24 Initialization :-\par
\b0\f0\fs22 Initialize local variables where they\rquote re declared. The only reason not to initialize a variable where it\rquote s declared is if the initial value depends on some computation occurring first.\par
\fs28\par
\b\f2 Statements :\par
\par
\fs24 Simple Statements :-\par
\b0\f0\fs22 Each line should contain at most one statement. Example:\par
argv++; argc--; // AVOID!\par
\par
\b\f2\fs24 Compound Statements :-\par
\b0\f0\fs22 Compound statements are statements that contain lists of statements enclosed in braces\par
\ldblquote\{ statements \}\rdblquote . \par
\f1\bullet\f0  The enclosed statements should be indented one more level than the compound statement.\par
\f1\bullet\f0  The opening brace should be at the end of the line that begins the compound statement; the\par
closing brace should begin a line and be indented to the beginning of the compound\par
statement.\par
\f1\bullet\f0  Braces are used around all statements, even singletons, when they are part of a control\par
structure, such as a if-else or for statement. This makes it easier to add statements\par
without accidentally introducing bugs due to forgetting to add braces.\par
\par
\b\f2\fs24 return Statements :\par
\b0\f0\fs22 A return statement with a value should not use parentheses unless they make the return value more obvious in some way. Example:\par
return;\par
return myDisk.size();\par
return (size ? size : defaultSize);\par
\par
\b\f2\fs24 if, if-else, if-else-if-else Statements\par
\b0\f0\fs22 The if-else class of statements should have the following form:\par
if (\i condition\i0 ) \{\par
\i statements\i0 ;\par
\}\par
if (\i condition\i0 ) \{\par
\i statements\i0 ;\par
\} else \{\par
\i statements\i0 ;\par
\}\par
if (\i condition\i0 ) \{\par
\i statements\i0 ;\par
\} else if (\i condition\i0 ) \{\par
\i statements\i0 ;\par
\} else if (\i condition\i0 ) \{\par
\i statements\i0 ;\par
\}\par
\b\f2\fs24 for Statements\par
\b0\f0\fs22 A for statement should have the following form:\par
for (\i initialization\i0 ; \i condition\i0 ; \i update\i0 ) \{\par
\i statements\i0 ;\par
\}\par
\f3\fs18\par
\b\f2\fs24 while Statements\par
\b0\f0\fs22 A while statement should have the following form:\par
while (\i condition\i0 ) \{\par
\i statements\i0 ;\par
\}\par
An empty while statement should have the following form:\par
while (\i condition\i0 );\par
\par
\b\f2\fs24 do-while Statements\par
\b0\f0\fs22 A do-while statement should have the following form:\par
do \{\par
\i statements\i0 ;\par
\} while (\i condition\i0 );\par
\par
\b\f2\fs24 switch Statements\par
\b0\f0\fs22 A switch statement should have the following form:\par
\par
switch (\i condition\i0 ) \{\par
case ABC:\par
\i statements\i0 ;\par
/* falls through */\par
case DEF:\par
\i statements\i0 ;\par
break;\par
case XYZ:\par
\i statements\i0 ;\par
break;\par
default:\par
\i statements\i0 ;\par
break;\par
\}\par
\b\f2\fs24 try-catch Statements\par
\b0\f0\fs22 A try-catch statement should have the following format:\par
try \{\par
\i statements\i0 ;\par
\} catch (ExceptionClass e) \{\par
\i statements\i0 ;\par
\}\par
\par
\b\f2\fs28 White Space :\par
\fs24\par
Blank Lines :-\par
\b0\f0\fs22 Blank lines improve readability by setting off sections of code that are logically related.\par
Two blank lines should always be used in the following circumstances:\par
\f1\bullet\f0  Between sections of a source file\par
\f1\bullet\f0  Between class and interface definitions\par
One blank line should always be used in the following circumstances:\par
\f1\bullet\f0  Between methods\par
\f1\bullet\f0  Between the local variables in a method and its first statement\par
\f1\bullet\f0  Before a block or single-line comment\par
\par
\b\f2\fs28 Naming Conventions :\par
\par

\pard\sa200\sl276\slmult1\qj\f0\fs22 ClassName : \b0 Class name should be a identifier and first letter should be uppercase. or dollar($) or underscore(_).\par

\pard ex: \tab class Raster;\par

\pard\sa200\sl276\slmult1\qj\tab class ImageSprite;\par

\pard\qj\b Interfaces : \b0 Interface names should be capitalized like class names.\par
\par

\pard ex:\tab interface RasterDelegate;\par

\pard\qj\tab interface Storing;\par
\b\par

\pard\sa200\sl276\slmult1\qj MethodName : \b0 Method name should be a identifier and first letter should be lowercase followed by camel-case.\par

\pard ex: \tab run();\par
\tab runFast();\par

\pard\sa200\sl276\slmult1\qj\tab getBackground();\b\par
VariableName : \b0 variable name should be in lowercase.\par

\pard ex:\tab int i;\par
\tab char *cp;\par

\pard\sa200\sl276\slmult1\qj\tab float myWidth;\par

\pard\qj\b Constants\b0  : The names of variables declared class constants and of ANSI constants should be all uppercase with words separated by underscores.\par
\par

\pard ex: \tab int MIN_WIDTH = 4;\par

\pard\li720 int MAX_WIDTH = 999;\par

\pard\li720\qj int GET_THE_CPU = 1;\par

\pard\qj\par
\par
\b\f2\fs28 Programming Practices :\par
\par
\fs22 Providing Access to Instance and Class Variables :\fs24\par
\b0\f0\fs22 Don\rquote t make any instance or class variable public without good reason. Often, instance variables don\rquote t need to be explicitly set or gotten\f1\emdash\f0 often that happens as a side effect of method calls.\par
\par

\pard\b\f2\fs24 Referring to Class Variables and Methods :\par

\pard\qj\b0\f0\fs22 Avoid using an object to access a class (static) variable or method. Use a class name instead.\par
For example:\par

\pard\li1440\qj classMethod(); \tab\tab //OK\par

\pard\qj\tab\tab AClass.classMethod(); \tab //OK\par
\par

\pard\b\f2\fs24 Constants :\par

\pard\qj\b0\f0\fs22 Numerical constants (literals) should not be coded directly, except for -1, 0, and 1, which can\par
appear in a for loop as counter values.\par
\par

\pard\b\f2\fs24 Variable Assignments :\par
\par

\pard\qj\b0\f0\fs22 Avoid assigning several variables to the same value in a single statement. It is hard to read.\par
Example:\par
fooBar.fChar = barFoo.lchar = 'c'; \tab\tab // AVOID!\par
\par
if (c++ = d++) \{ \tab\tab\tab\tab // AVOID! Java disallows\par
...\par
\}\par
should be written as\par
if ((c++ = d++) != 0) \{\par
...\par
\}\par
\par
Do not use embedded assignments in an attempt to improve run-time performance. This is the job of the compiler, and besides, it rarely actually helps.\par
 Example:\par
d = (a = b + c) + r;\tab\tab\tab\tab  // AVOID!\par
\par
should be written as\par
a = b + c;\par
d = a + r;\par

\pard\f4\par

\pard\qj\ul\b\f0\par
}
 